{"version":3,"sources":["components/Sort/Sort.tsx","components/TodoItem/TodoItem.tsx","components/TodoList.tsx","components/App/App.tsx","index.tsx"],"names":["Sort","props","handleTodoFilter","handleClearCompleted","remainingTodos","isActive","setIsActive","className","_id","name","filter","map","tab","onClick","TodoItem","id","title","complete","toggleTodo","removeTodo","type","checked","onChange","TodoList","items","todo","App","useState","value","setValue","todos","setTodos","filtered","setFiltered","length","inputRef","useRef","addTodo","Date","now","useEffect","current","focus","placeholder","e","target","onKeyDown","key","ref","newTodo","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f885f54e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ITodo } from \"../../types/data\";\r\nimport \"./Sort.css\";\r\n\r\ninterface ITodoSortProps {\r\n  handleTodoFilter: (complete: boolean | string, id: number) => void;\r\n  handleClearCompleted: (complete: boolean | string) => void;\r\n  items: ITodo[];\r\n  remainingTodos: number;\r\n  isActive: number;\r\n  setIsActive: any;\r\n}\r\n\r\nconst Sort: React.FC<ITodoSortProps> = (props) => {\r\n  const {\r\n    handleTodoFilter,\r\n    handleClearCompleted,\r\n    remainingTodos,\r\n    isActive,\r\n    setIsActive,\r\n  } = props;\r\n\r\n  const tabs = [\r\n    {\r\n      _id: 1,\r\n      name: \"All\",\r\n      filter: \"all\",\r\n    },\r\n    {\r\n      _id: 2,\r\n      name: \"Active\",\r\n      filter: false,\r\n    },\r\n    {\r\n      _id: 3,\r\n      name: \"Completed\",\r\n      filter: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <nav className=\"sort\">\r\n      <p className=\"sort__text\">{`${remainingTodos}  items left`}</p>\r\n      <span className=\"sort__btn-grup\">\r\n        {tabs.map((tab) => (\r\n          <button\r\n            key={tab._id}\r\n            onClick={() => {\r\n              handleTodoFilter(tab.filter, tab._id);\r\n              setIsActive(tab._id);\r\n            }}\r\n            className={`${\r\n              isActive === tab._id ? \"sort__btn-sorting sort__btn\" : \"sort__btn\"\r\n            }`}\r\n          >\r\n            {tab.name}\r\n          </button>\r\n        ))}\r\n      </span>\r\n      <button className=\"sort__btn\" onClick={() => handleClearCompleted(false)}>\r\n        Clear completed\r\n      </button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n","import { ITodo } from \"../../types/data\";\r\nimport \"./Todoitem.css\";\r\nimport { AiOutlineCheck, AiOutlineClose } from \"react-icons/ai\";\r\n\r\ninterface ITodoItem extends ITodo {\r\n  toggleTodo: (id: number) => void;\r\n  removeTodo: (id: number) => void;\r\n}\r\n\r\nconst TodoItem: React.FC<ITodoItem> = (props) => {\r\n  const { id, title, complete, toggleTodo, removeTodo } = props;\r\n  return (\r\n    <div className=\"todoitem\">\r\n      <label className=\"todoitem__label\">\r\n        <input\r\n          className=\"todoitem__checkbox\"\r\n          type=\"checkbox\"\r\n          checked={complete}\r\n          onChange={() => toggleTodo(id)}\r\n        />\r\n        <span className=\"todoitem__check\">\r\n          {complete && <AiOutlineCheck className=\"todoitem__check-on\" />}\r\n        </span>\r\n        {complete ? (\r\n          <span className=\"todoitem__text todoitem__text-cross-out\">\r\n            {title}\r\n          </span>\r\n        ) : (\r\n          <span className=\"todoitem__text\">{title}</span>\r\n        )}\r\n      </label>\r\n\r\n      <button onClick={() => removeTodo(id)} className=\"todoitem__btn\">\r\n        <AiOutlineClose />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { TodoItem };\r\n","import { ITodo } from \"../types/data\";\r\nimport Sort from \"./Sort/Sort\";\r\nimport { TodoItem } from \"./TodoItem/TodoItem\";\r\n\r\ninterface ITodoListProps {\r\n  items: ITodo[];\r\n  toggleTodo: (id: number) => void;\r\n  removeTodo: (id: number) => void;\r\n  handleTodoFilter: (complete: boolean | string, id: number) => void;\r\n  handleClearCompleted: (complete: boolean | string) => void;\r\n  remainingTodos: number;\r\n  isActive: number;\r\n  setIsActive: any;\r\n}\r\n\r\nconst TodoList: React.FC<ITodoListProps> = (props) => {\r\n  const {\r\n    items,\r\n    toggleTodo,\r\n    removeTodo,\r\n    handleTodoFilter,\r\n    handleClearCompleted,\r\n    remainingTodos,\r\n    isActive,\r\n    setIsActive,\r\n  } = props;\r\n  return (\r\n    <div>\r\n      {items.map((todo) => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          toggleTodo={toggleTodo}\r\n          removeTodo={removeTodo}\r\n          {...todo}\r\n        />\r\n      ))}\r\n      <Sort\r\n        items={items}\r\n        handleTodoFilter={handleTodoFilter}\r\n        handleClearCompleted={handleClearCompleted}\r\n        remainingTodos={remainingTodos}\r\n        isActive={isActive}\r\n        setIsActive={setIsActive}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { TodoList };\r\n","import { useState, useRef, useEffect } from \"react\";\r\nimport { ITodo } from \"../../types/data\";\r\nimport { TodoList } from \"../TodoList\";\r\nimport \"./App.css\";\r\nimport { FaChevronDown } from \"react-icons/fa\";\r\n\r\nconst App: React.FC = () => {\r\n  const [isActive, setIsActive] = useState(1);\r\n  const [value, setValue] = useState(\"\");\r\n  const [todos, setTodos] = useState<ITodo[]>([]);\r\n  const [filtered, setFiltered] = useState(todos);\r\n  const remainingTodos = todos.filter((todos) => !todos.complete).length;\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // передача значений из поля ввода\r\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  // реакция при нажатии на клавишу клавиатуры\r\n  const handleKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      addTodo();\r\n    }\r\n  };\r\n\r\n  // добавление данных в todos\r\n  const addTodo = () => {\r\n    //проверка inputa перед отправкой\r\n    if (value) {\r\n      setTodos([\r\n        ...todos,\r\n        {\r\n          id: Date.now(),\r\n          title: value,\r\n          complete: false,\r\n        },\r\n      ]);\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  // удаление отдельной задачи\r\n  const removeTodo = (id: number): void => {\r\n    let newTodo = [...todos].filter((todo) => todo.id !== id);\r\n    setTodos(newTodo);\r\n    setIsActive(1);\r\n  };\r\n\r\n  // удаление выпольненных задач\r\n  const handleClearCompleted = (complete: string | boolean): void => {\r\n    setTodos(todos.filter((todo) => todo.complete === complete));\r\n  };\r\n\r\n  // выполненная/невыполненная\r\n  const toggleTodo = (id: number): void => {\r\n    setIsActive(1);\r\n    let newTodo = [...todos].filter((todo) => {\r\n      if (todo.id === id) {\r\n        todo.complete = !todo.complete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(newTodo);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFiltered(todos);\r\n  }, [todos]);\r\n\r\n  // для фокуса курсора в инпуте\r\n  useEffect(() => {\r\n    if (inputRef.current) inputRef.current.focus();\r\n  }, []);\r\n\r\n  // фильтрация\r\n  function handleTodoFilter(complete: string | boolean, _id: number) {\r\n    if (complete === \"all\") {\r\n      setFiltered(todos);\r\n    } else {\r\n      setFiltered([...todos].filter((item) => item.complete === complete));\r\n    }\r\n    setIsActive(_id);\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1 className=\"app__title\">todos</h1>\r\n      <div className=\"app__list\">\r\n        <div className=\"app__input\">\r\n          <FaChevronDown className=\"app__input-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            className=\"app__input-field\"\r\n            value={value}\r\n            placeholder=\"What needs to be done?\"\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n            ref={inputRef}\r\n          />\r\n        </div>\r\n\r\n        <TodoList\r\n          items={filtered}\r\n          removeTodo={removeTodo}\r\n          toggleTodo={toggleTodo}\r\n          handleTodoFilter={handleTodoFilter}\r\n          handleClearCompleted={handleClearCompleted}\r\n          remainingTodos={remainingTodos}\r\n          isActive={isActive}\r\n          setIsActive={setIsActive}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}